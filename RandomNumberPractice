// randomNumberGenerator.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include <iostream>
#include <ctime>		//has time() function for seeding our random number
#include <random>		//C++11 prng library. mt19937 is here.
#include <string>

#include <thread>		//works with <chrono> to let us sleep the program for a given amount of time
#include <chrono>		//works with <thread> to let us sleep the program for a given amount of time


int randomDevice()
{
	static int counter{ 0 };
	int rd{ static_cast<int> (time(0) + counter) };
	counter += time(0);
	return rd;
}

//returns the widest random number possible as a signed integer
int rngTwister()
{
	std::mt19937 mt_rand(randomDevice());
	int randomNum{ 0 };
	randomNum = mt_rand();
	return randomNum;
}

//accepts max and min arguments. no argument = prng 6 to 1.
int rng(int max = 6, int min = 1)
{
	std::mt19937 randomizer(randomDevice()); //replace `time(0)` with `randomDevice()`
	std::uniform_int_distribution<int> range(min, max);
	int randomNum{ 0 };
	randomNum = range(randomizer);

	return randomNum;
}

int resultPercent(int result, int total)
{
	int percent{ 0 };
	percent = (static_cast<double>(result) / static_cast<double>(total))*100.0;
	return percent;
}

void prngDistributionTest(int random)
{

	static int results[7];
	if (random == 1)
		results[1] += 1;
	else if (random == 2)
		results[2] += 1;
	else if (random == 3)
		results[3] += 1;
	else if (random == 4)
		results[4] += 1;
	else if (random == 5)
		results[5] += 1;
	else if (random == 6)
		results[6] += 1;
	else
		results[0] += 1;

	int total{ results[1] + results[2] + results[3] + results[4] + results[5] + results[6] + results[0] };

	std::cout << "1: " << results[1] << "   2: " << results[2] << "   3: " << results[3] << "   4: " << results[4] << "   5: " << results[5] << "   6: " << results[6] << "   error: " << results[7] << "\n";
	std::cout << "1: " << resultPercent(results[1], total) << "   2: " << resultPercent(results[2], total) << "   3: " << resultPercent(results[3], total) << "   4: " << resultPercent(results[4], total) << "   5: " << resultPercent(results[5], total) << "   6: " << resultPercent(results[6], total)<< "\n\n";

	}

int main()
{
	bool repeat{ true };
	std::string temp{ "empty" };
	int tempRand{ 0 };
	do
	{
//		std::cout << rngTwister() << std::endl;
		for (int x = 0; x < 100; x++)
		{
			tempRand = rng();
			std::cout << tempRand << std::endl;
			prngDistributionTest(tempRand);
			//		std::this_thread::sleep_for(std::chrono::seconds(1));
		}
		getline(std::cin, temp);
	} while (repeat = true);
	return 0;
}
